// Test 15: Very Long Script File (1000+ lines)
print("=== Test 15: Very Long Script File ===");
print("Testing interpreter performance and stability with large files...");

// Section 1: Variable declarations (Lines 1-100)
print("Section 1: Mass variable declarations");
var_001 = 1; var_002 = 2; var_003 = 3; var_004 = 4; var_005 = 5;
var_006 = 6; var_007 = 7; var_008 = 8; var_009 = 9; var_010 = 10;
var_011 = 11; var_012 = 12; var_013 = 13; var_014 = 14; var_015 = 15;
var_016 = 16; var_017 = 17; var_018 = 18; var_019 = 19; var_020 = 20;
var_021 = 21; var_022 = 22; var_023 = 23; var_024 = 24; var_025 = 25;
var_026 = 26; var_027 = 27; var_028 = 28; var_029 = 29; var_030 = 30;
var_031 = 31; var_032 = 32; var_033 = 33; var_034 = 34; var_035 = 35;
var_036 = 36; var_037 = 37; var_038 = 38; var_039 = 39; var_040 = 40;
var_041 = 41; var_042 = 42; var_043 = 43; var_044 = 44; var_045 = 45;
var_046 = 46; var_047 = 47; var_048 = 48; var_049 = 49; var_050 = 50;
var_051 = 51; var_052 = 52; var_053 = 53; var_054 = 54; var_055 = 55;
var_056 = 56; var_057 = 57; var_058 = 58; var_059 = 59; var_060 = 60;
var_061 = 61; var_062 = 62; var_063 = 63; var_064 = 64; var_065 = 65;
var_066 = 66; var_067 = 67; var_068 = 68; var_069 = 69; var_070 = 70;
var_071 = 71; var_072 = 72; var_073 = 73; var_074 = 74; var_075 = 75;
var_076 = 76; var_077 = 77; var_078 = 78; var_079 = 79; var_080 = 80;
var_081 = 81; var_082 = 82; var_083 = 83; var_084 = 84; var_085 = 85;
var_086 = 86; var_087 = 87; var_088 = 88; var_089 = 89; var_090 = 90;
var_091 = 91; var_092 = 92; var_093 = 93; var_094 = 94; var_095 = 95;
var_096 = 96; var_097 = 97; var_098 = 98; var_099 = 99; var_100 = 100;

print("Declared 100 variables");

// Section 2: String operations (Lines 101-200)
print("Section 2: Mass string operations");
str_001 = "String number 001"; str_002 = "String number 002"; str_003 = "String number 003";
str_004 = "String number 004"; str_005 = "String number 005"; str_006 = "String number 006";
str_007 = "String number 007"; str_008 = "String number 008"; str_009 = "String number 009";
str_010 = "String number 010"; str_011 = "String number 011"; str_012 = "String number 012";
str_013 = "String number 013"; str_014 = "String number 014"; str_015 = "String number 015";
str_016 = "String number 016"; str_017 = "String number 017"; str_018 = "String number 018";
str_019 = "String number 019"; str_020 = "String number 020"; str_021 = "String number 021";
str_022 = "String number 022"; str_023 = "String number 023"; str_024 = "String number 024";
str_025 = "String number 025"; str_026 = "String number 026"; str_027 = "String number 027";
str_028 = "String number 028"; str_029 = "String number 029"; str_030 = "String number 030";
str_031 = "String number 031"; str_032 = "String number 032"; str_033 = "String number 033";
str_034 = "String number 034"; str_035 = "String number 035"; str_036 = "String number 036";
str_037 = "String number 037"; str_038 = "String number 038"; str_039 = "String number 039";
str_040 = "String number 040"; str_041 = "String number 041"; str_042 = "String number 042";
str_043 = "String number 043"; str_044 = "String number 044"; str_045 = "String number 045";
str_046 = "String number 046"; str_047 = "String number 047"; str_048 = "String number 048";
str_049 = "String number 049"; str_050 = "String number 050"; str_051 = "String number 051";
str_052 = "String number 052"; str_053 = "String number 053"; str_054 = "String number 054";
str_055 = "String number 055"; str_056 = "String number 056"; str_057 = "String number 057";
str_058 = "String number 058"; str_059 = "String number 059"; str_060 = "String number 060";
str_061 = "String number 061"; str_062 = "String number 062"; str_063 = "String number 063";
str_064 = "String number 064"; str_065 = "String number 065"; str_066 = "String number 066";
str_067 = "String number 067"; str_068 = "String number 068"; str_069 = "String number 069";
str_070 = "String number 070"; str_071 = "String number 071"; str_072 = "String number 072";
str_073 = "String number 073"; str_074 = "String number 074"; str_075 = "String number 075";
str_076 = "String number 076"; str_077 = "String number 077"; str_078 = "String number 078";
str_079 = "String number 079"; str_080 = "String number 080"; str_081 = "String number 081";
str_082 = "String number 082"; str_083 = "String number 083"; str_084 = "String number 084";
str_085 = "String number 085"; str_086 = "String number 086"; str_087 = "String number 087";
str_088 = "String number 088"; str_089 = "String number 089"; str_090 = "String number 090";
str_091 = "String number 091"; str_092 = "String number 092"; str_093 = "String number 093";
str_094 = "String number 094"; str_095 = "String number 095"; str_096 = "String number 096";
str_097 = "String number 097"; str_098 = "String number 098"; str_099 = "String number 099";
str_100 = "String number 100";

print("Created 100 strings");

// Section 3: Arithmetic operations (Lines 201-300)
print("Section 3: Mass arithmetic operations");
calc_001 = 1 + 1; calc_002 = 2 + 2; calc_003 = 3 + 3; calc_004 = 4 + 4; calc_005 = 5 + 5;
calc_006 = 6 + 6; calc_007 = 7 + 7; calc_008 = 8 + 8; calc_009 = 9 + 9; calc_010 = 10 + 10;
calc_011 = 11 * 2; calc_012 = 12 * 2; calc_013 = 13 * 2; calc_014 = 14 * 2; calc_015 = 15 * 2;
calc_016 = 16 * 2; calc_017 = 17 * 2; calc_018 = 18 * 2; calc_019 = 19 * 2; calc_020 = 20 * 2;
calc_021 = 21 - 1; calc_022 = 22 - 2; calc_023 = 23 - 3; calc_024 = 24 - 4; calc_025 = 25 - 5;
calc_026 = 26 - 6; calc_027 = 27 - 7; calc_028 = 28 - 8; calc_029 = 29 - 9; calc_030 = 30 - 10;
calc_031 = 31 / 1; calc_032 = 32 / 2; calc_033 = 33 / 3; calc_034 = 34 / 2; calc_035 = 35 / 5;
calc_036 = 36 / 6; calc_037 = 37 / 1; calc_038 = 38 / 2; calc_039 = 39 / 3; calc_040 = 40 / 4;
calc_041 = (41 + 1) * 2; calc_042 = (42 - 2) * 3; calc_043 = (43 + 3) / 2; calc_044 = (44 * 2) - 4;
calc_045 = (45 / 5) + 5; calc_046 = (46 + 6) - 6; calc_047 = (47 * 1) + 7; calc_048 = (48 / 2) * 3;
calc_049 = 49 + 49; calc_050 = 50 * 50; calc_051 = 51 - 1; calc_052 = 52 / 2; calc_053 = 53 + 7;
calc_054 = 54 * 3; calc_055 = 55 - 5; calc_056 = 56 / 4; calc_057 = 57 + 3; calc_058 = 58 * 2;
calc_059 = 59 - 9; calc_060 = 60 / 6; calc_061 = 61 + 1; calc_062 = 62 * 1; calc_063 = 63 - 3;
calc_064 = 64 / 8; calc_065 = 65 + 5; calc_066 = 66 * 6; calc_067 = 67 - 7; calc_068 = 68 / 2;
calc_069 = 69 + 9; calc_070 = 70 * 7; calc_071 = 71 - 1; calc_072 = 72 / 9; calc_073 = 73 + 3;
calc_074 = 74 * 4; calc_075 = 75 - 5; calc_076 = 76 / 4; calc_077 = 77 + 7; calc_078 = 78 * 8;
calc_079 = 79 - 9; calc_080 = 80 / 10; calc_081 = 81 + 1; calc_082 = 82 * 2; calc_083 = 83 - 3;
calc_084 = 84 / 12; calc_085 = 85 + 5; calc_086 = 86 * 6; calc_087 = 87 - 7; calc_088 = 88 / 8;
calc_089 = 89 + 9; calc_090 = 90 * 9; calc_091 = 91 - 1; calc_092 = 92 / 4; calc_093 = 93 + 3;
calc_094 = 94 * 4; calc_095 = 95 - 5; calc_096 = 96 / 6; calc_097 = 97 + 7; calc_098 = 98 * 8;
calc_099 = 99 - 9; calc_100 = 100 / 10;

print("Performed 100 arithmetic operations");

// Section 4: Boolean operations (Lines 301-400)
print("Section 4: Mass boolean operations");
bool_001 = true; bool_002 = false; bool_003 = true; bool_004 = false; bool_005 = true;
bool_006 = false; bool_007 = true; bool_008 = false; bool_009 = true; bool_010 = false;
bool_011 = 1 > 0; bool_012 = 2 < 1; bool_013 = 3 == 3; bool_014 = 4 != 5; bool_015 = 5 >= 5;
bool_016 = 6 <= 6; bool_017 = 7 > 6; bool_018 = 8 < 9; bool_019 = 9 == 9; bool_020 = 10 != 11;
bool_021 = true && true; bool_022 = false || true; bool_023 = !false; bool_024 = true && false;
bool_025 = false || false; bool_026 = !true; bool_027 = true || true; bool_028 = false && false;
bool_029 = (1 > 0) && (2 > 1); bool_030 = (3 < 2) || (4 > 3); bool_031 = !(5 < 4);
bool_032 = (6 == 6) && (7 == 7); bool_033 = (8 != 9) || (9 != 8); bool_034 = !(10 == 11);
bool_035 = 35 > 30; bool_036 = 36 < 40; bool_037 = 37 == 37; bool_038 = 38 != 39;
bool_039 = 39 >= 35; bool_040 = 40 <= 45; bool_041 = 41 > 40; bool_042 = 42 < 50;
bool_043 = 43 == 43; bool_044 = 44 != 45; bool_045 = 45 >= 40; bool_046 = 46 <= 50;
bool_047 = 47 > 45; bool_048 = 48 < 50; bool_049 = 49 == 49; bool_050 = 50 != 51;
bool_051 = true; bool_052 = false; bool_053 = true; bool_054 = false; bool_055 = true;
bool_056 = false; bool_057 = true; bool_058 = false; bool_059 = true; bool_060 = false;
bool_061 = 61 > 60; bool_062 = 62 < 70; bool_063 = 63 == 63; bool_064 = 64 != 65;
bool_065 = 65 >= 60; bool_066 = 66 <= 70; bool_067 = 67 > 65; bool_068 = 68 < 70;
bool_069 = 69 == 69; bool_070 = 70 != 71; bool_071 = 71 >= 70; bool_072 = 72 <= 75;
bool_073 = 73 > 70; bool_074 = 74 < 80; bool_075 = 75 == 75; bool_076 = 76 != 77;
bool_077 = 77 >= 75; bool_078 = 78 <= 80; bool_079 = 79 > 75; bool_080 = 80 < 85;
bool_081 = 81 == 81; bool_082 = 82 != 83; bool_083 = 83 >= 80; bool_084 = 84 <= 85;
bool_085 = 85 > 80; bool_086 = 86 < 90; bool_087 = 87 == 87; bool_088 = 88 != 89;
bool_089 = 89 >= 85; bool_090 = 90 <= 95; bool_091 = 91 > 90; bool_092 = 92 < 95;
bool_093 = 93 == 93; bool_094 = 94 != 95; bool_095 = 95 >= 90; bool_096 = 96 <= 100;
bool_097 = 97 > 95; bool_098 = 98 < 100; bool_099 = 99 == 99; bool_100 = 100 != 101;

print("Performed 100 boolean operations");

// Section 5: List operations (Lines 401-500)
print("Section 5: Mass list operations");
list_001 = [1]; list_002 = [1, 2]; list_003 = [1, 2, 3]; list_004 = [1, 2, 3, 4]; list_005 = [1, 2, 3, 4, 5];
list_006 = [6]; list_007 = [6, 7]; list_008 = [6, 7, 8]; list_009 = [6, 7, 8, 9]; list_010 = [6, 7, 8, 9, 10];
list_011 = [11, 12]; list_012 = [12, 13]; list_013 = [13, 14]; list_014 = [14, 15]; list_015 = [15, 16];
list_016 = [16, 17]; list_017 = [17, 18]; list_018 = [18, 19]; list_019 = [19, 20]; list_020 = [20, 21];
list_021 = ["a"]; list_022 = ["a", "b"]; list_023 = ["a", "b", "c"]; list_024 = ["a", "b", "c", "d"];
list_025 = ["e"]; list_026 = ["e", "f"]; list_027 = ["e", "f", "g"]; list_028 = ["e", "f", "g", "h"];
list_029 = [true]; list_030 = [true, false]; list_031 = [true, false, true]; list_032 = [false, true, false];
list_033 = [1, "a"]; list_034 = [2, "b"]; list_035 = [3, "c"]; list_036 = [4, "d"]; list_037 = [5, "e"];
list_038 = [1, true]; list_039 = [2, false]; list_040 = [3, true]; list_041 = [4, false]; list_042 = [5, true];
list_043 = ["x", 1]; list_044 = ["y", 2]; list_045 = ["z", 3]; list_046 = ["w", 4]; list_047 = ["v", 5];
list_048 = [1, 2, "a"]; list_049 = [3, 4, "b"]; list_050 = [5, 6, "c"]; list_051 = [7, 8, "d"];
list_052 = [true, 1, "x"]; list_053 = [false, 2, "y"]; list_054 = [true, 3, "z"]; list_055 = [false, 4, "w"];
list_056 = []; list_057 = []; list_058 = []; list_059 = []; list_060 = [];
list_061 = [61]; list_062 = [62]; list_063 = [63]; list_064 = [64]; list_065 = [65];
list_066 = [66, 67]; list_067 = [67, 68]; list_068 = [68, 69]; list_069 = [69, 70]; list_070 = [70, 71];
list_071 = [71, 72, 73]; list_072 = [72, 73, 74]; list_073 = [73, 74, 75]; list_074 = [74, 75, 76];
list_075 = [75, 76, 77, 78]; list_076 = [76, 77, 78, 79]; list_077 = [77, 78, 79, 80];
list_078 = [78, 79, 80, 81, 82]; list_079 = [79, 80, 81, 82, 83]; list_080 = [80, 81, 82, 83, 84];
list_081 = ["str81"]; list_082 = ["str82"]; list_083 = ["str83"]; list_084 = ["str84"]; list_085 = ["str85"];
list_086 = ["str86", "str87"]; list_087 = ["str87", "str88"]; list_088 = ["str88", "str89"];
list_089 = ["str89", "str90", "str91"]; list_090 = ["str90", "str91", "str92"];
list_091 = [true, true]; list_092 = [false, false]; list_093 = [true, false]; list_094 = [false, true];
list_095 = [true, true, true]; list_096 = [false, false, false]; list_097 = [true, false, true];
list_098 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; list_099 = ["a", "b", "c", "d", "e", "f", "g", "h"];
list_100 = [1, "a", true, 2, "b", false, 3, "c", true, 4];

print("Created 100 lists");

// Section 6: Control flow testing (Lines 501-600)
print("Section 6: Mass control flow testing");

// If statements
if (1 > 0) { test_if_001 = "passed"; } if (2 > 1) { test_if_002 = "passed"; }
if (3 > 2) { test_if_003 = "passed"; } if (4 > 3) { test_if_004 = "passed"; }
if (5 > 4) { test_if_005 = "passed"; } if (6 > 5) { test_if_006 = "passed"; }
if (7 > 6) { test_if_007 = "passed"; } if (8 > 7) { test_if_008 = "passed"; }
if (9 > 8) { test_if_009 = "passed"; } if (10 > 9) { test_if_010 = "passed"; }

// If-else statements
if (true) { test_ifelse_001 = "true"; } else { test_ifelse_001 = "false"; }
if (false) { test_ifelse_002 = "true"; } else { test_ifelse_002 = "false"; }
if (1 == 1) { test_ifelse_003 = "equal"; } else { test_ifelse_003 = "not_equal"; }
if (2 == 3) { test_ifelse_004 = "equal"; } else { test_ifelse_004 = "not_equal"; }
if (5 > 10) { test_ifelse_005 = "greater"; } else { test_ifelse_005 = "not_greater"; }

// While loops
loop_counter_001 = 0; while (loop_counter_001 < 3) { loop_counter_001 = loop_counter_001 + 1; }
loop_counter_002 = 0; while (loop_counter_002 < 5) { loop_counter_002 = loop_counter_002 + 1; }
loop_counter_003 = 0; while (loop_counter_003 < 2) { loop_counter_003 = loop_counter_003 + 1; }
loop_counter_004 = 0; while (loop_counter_004 < 4) { loop_counter_004 = loop_counter_004 + 1; }
loop_counter_005 = 0; while (loop_counter_005 < 1) { loop_counter_005 = loop_counter_005 + 1; }

// For loops
for_result_001 = 0; for (i = 1; i <= 5; i = i + 1) { for_result_001 = for_result_001 + i; }
for_result_002 = 0; for (i = 1; i <= 10; i = i + 1) { for_result_002 = for_result_002 + 1; }
for_result_003 = 1; for (i = 1; i <= 3; i = i + 1) { for_result_003 = for_result_003 * 2; }
for_result_004 = 0; for (i = 2; i <= 8; i = i + 2) { for_result_004 = for_result_004 + i; }
for_result_005 = 100; for (i = 1; i <= 5; i = i + 1) { for_result_005 = for_result_005 - i; }

print("Completed mass control flow testing");

// Section 7: Function calls and expressions (Lines 601-700)
print("Section 7: Mass function calls and expressions");

// Length function calls
len_result_001 = len("test1"); len_result_002 = len("test12"); len_result_003 = len("test123");
len_result_004 = len("test1234"); len_result_005 = len("test12345"); len_result_006 = len("");
len_result_007 = len("a"); len_result_008 = len("ab"); len_result_009 = len("abc");
len_result_010 = len("abcd"); len_result_011 = len("abcde"); len_result_012 = len("abcdef");
len_result_013 = len([1]); len_result_014 = len([1, 2]); len_result_015 = len([1, 2, 3]);
len_result_016 = len([1, 2, 3, 4]); len_result_017 = len([1, 2, 3, 4, 5]); len_result_018 = len([]);
len_result_019 = len(["a"]); len_result_020 = len(["a", "b"]); len_result_021 = len(["a", "b", "c"]);
len_result_022 = len([true]); len_result_023 = len([true, false]); len_result_024 = len([true, false, true]);
len_result_025 = len("very long string for testing"); len_result_026 = len("another long string");
len_result_027 = len("short"); len_result_028 = len("medium length"); len_result_029 = len("x");
len_result_030 = len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); len_result_031 = len(["many", "string", "elements"]);

// Complex expressions
expr_001 = (1 + 2) * 3; expr_002 = (4 + 5) * 6; expr_003 = (7 + 8) * 9; expr_004 = (10 + 11) * 12;
expr_005 = 1 + 2 * 3; expr_006 = 4 + 5 * 6; expr_007 = 7 + 8 * 9; expr_008 = 10 + 11 * 12;
expr_009 = (1 + 2) / 3; expr_010 = (4 + 5) / 3; expr_011 = (6 + 9) / 3; expr_012 = (8 + 10) / 2;
expr_013 = 1 * 2 + 3; expr_014 = 4 * 5 + 6; expr_015 = 7 * 8 + 9; expr_016 = 10 * 11 + 12;
expr_017 = 1 - 2 + 3; expr_018 = 4 - 5 + 6; expr_019 = 7 - 8 + 9; expr_020 = 10 - 11 + 12;
expr_021 = ((1 + 2) * 3) - 4; expr_022 = ((5 + 6) * 7) - 8; expr_023 = ((9 + 10) * 11) - 12;
expr_024 = (1 + 2) * (3 + 4); expr_025 = (5 + 6) * (7 + 8); expr_026 = (9 + 10) * (11 + 12);
expr_027 = 1 + 2 + 3 + 4 + 5; expr_028 = 6 + 7 + 8 + 9 + 10; expr_029 = 11 + 12 + 13 + 14 + 15;
expr_030 = 1 * 2 * 3 * 4; expr_031 = 5 * 6 / 6 * 5; expr_032 = 7 + 8 - 9 + 10; expr_033 = 11 - 12 + 13 - 14;

print("Completed mass function calls and expressions");

// Section 8: String concatenations (Lines 701-800)
print("Section 8: Mass string concatenations");

concat_001 = "Hello" + " " + "World"; concat_002 = "Test" + " " + "String"; concat_003 = "A" + "B" + "C";
concat_004 = "Number" + " " + "42"; concat_005 = "Bool" + " " + "true"; concat_006 = "List" + " " + "test";
concat_007 = "Pre" + "fix"; concat_008 = "Suf" + "fix"; concat_009 = "Mid" + "dle"; concat_010 = "Com" + "bine";
concat_011 = "Alpha" + "Beta"; concat_012 = "Gamma" + "Delta"; concat_013 = "Epsilon" + "Zeta";
concat_014 = "Eta" + "Theta"; concat_015 = "Iota" + "Kappa"; concat_016 = "Lambda" + "Mu";
concat_017 = "One" + "Two" + "Three"; concat_018 = "Four" + "Five" + "Six"; concat_019 = "Seven" + "Eight" + "Nine";
concat_020 = "First" + "Second" + "Third" + "Fourth"; concat_021 = "Alpha" + "Beta" + "Gamma" + "Delta";
concat_022 = "Red" + "Green" + "Blue"; concat_023 = "Up" + "Down" + "Left" + "Right";
concat_024 = "North" + "South" + "East" + "West"; concat_025 = "Spring" + "Summer" + "Fall" + "Winter";
concat_026 = "Mon" + "day"; concat_027 = "Tues" + "day"; concat_028 = "Wednes" + "day"; concat_029 = "Thurs" + "day";
concat_030 = "Fri" + "day"; concat_031 = "Satur" + "day"; concat_032 = "Sun" + "day";

print("Completed mass string concatenations");

// Section 9: Mixed operations (Lines 801-900)
print("Section 9: Mass mixed operations");

mixed_001 = 1 + len("test"); mixed_002 = 2 * len("hello"); mixed_003 = 3 + len([1, 2, 3]);
mixed_004 = 4 * len([1, 2]); mixed_005 = 5 + len(""); mixed_006 = 6 * len([]);
mixed_007 = len("a") + len("b"); mixed_008 = len([1]) + len([2]); mixed_009 = len("ab") + len("cd");
mixed_010 = len([1, 2]) + len([3, 4]); mixed_011 = len("test") * 2; mixed_012 = len([1, 2, 3]) * 3;
mixed_013 = (1 + 2) + len("hi"); mixed_014 = (3 * 4) + len("bye"); mixed_015 = (5 - 2) + len("ok");
mixed_016 = len("long string") + (10 - 5); mixed_017 = len([1, 2, 3, 4, 5]) + (20 / 4);
mixed_018 = len("test") == 4; mixed_019 = len([1, 2]) == 2; mixed_020 = len("") == 0;
mixed_021 = len("hello") > 3; mixed_022 = len([1, 2, 3]) < 5; mixed_023 = len("a") >= 1;
mixed_024 = len([]) <= 1; mixed_025 = len("test") != 3; mixed_026 = len([1]) == 1;

if (len("test") == 4) { mixed_if_001 = "correct"; } else { mixed_if_001 = "wrong"; }
if (len([1, 2]) > 1) { mixed_if_002 = "greater"; } else { mixed_if_002 = "not_greater"; }
if (len("") == 0) { mixed_if_003 = "empty"; } else { mixed_if_003 = "not_empty"; }

mixed_loop_001 = 0; for (i = 1; i <= len("hello"); i = i + 1) { mixed_loop_001 = mixed_loop_001 + 1; }
mixed_loop_002 = 0; for (i = 1; i <= len([1, 2, 3]); i = i + 1) { mixed_loop_002 = mixed_loop_002 + 2; }

print("Completed mass mixed operations");

// Section 10: Final stress testing (Lines 901-1000)
print("Section 10: Final stress testing");

stress_001 = ((1 + 2) * (3 + 4)) + ((5 + 6) * (7 + 8));
stress_002 = ((9 + 10) / (2 + 1)) + ((11 + 12) / (3 + 1));
stress_003 = (len("stress") + len("test")) * (len([1, 2]) + len([3, 4]));
stress_004 = (1 < 2) && (3 < 4) && (5 < 6) && (7 < 8);
stress_005 = (9 > 8) || (7 > 8) || (6 > 7) || (5 > 6);
stress_006 = !(false && false) && !(true && false) && (true || false);

stress_string_001 = "This" + " " + "is" + " " + "a" + " " + "very" + " " + "long" + " " + "concatenation";
stress_string_002 = "Testing" + " " + "the" + " " + "limits" + " " + "of" + " " + "string" + " " + "operations";
stress_string_003 = "A" + "B" + "C" + "D" + "E" + "F" + "G" + "H" + "I" + "J" + "K" + "L" + "M" + "N" + "O" + "P";

stress_list_001 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
stress_list_002 = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"];
stress_list_003 = [true, false, true, false, true, false, true, false];
stress_list_004 = [1, "a", true, 2, "b", false, 3, "c", true, 4, "d", false];

// Nested control structures
stress_nested_001 = 0;
for (outer = 1; outer <= 3; outer = outer + 1) {
    for (inner = 1; inner <= 3; inner = inner + 1) {
        if (outer == inner) {
            stress_nested_001 = stress_nested_001 + 1;
        } else {
            stress_nested_001 = stress_nested_001 + 2;
        }
    }
}

stress_nested_002 = 0;
for (i = 1; i <= 5; i = i + 1) {
    if (i == 1) {
        stress_nested_002 = stress_nested_002 + 10;
    } else if (i == 2) {
        stress_nested_002 = stress_nested_002 + 20;
    } else if (i == 3) {
        stress_nested_002 = stress_nested_002 + 30;
    } else {
        stress_nested_002 = stress_nested_002 + 40;
    }
}

// Complex boolean expressions
stress_bool_001 = (1 > 0) && (2 > 1) && (3 > 2) && (4 > 3) && (5 > 4);
stress_bool_002 = (1 < 2) || (3 < 2) || (5 < 4) || (7 < 6) || (9 < 8);
stress_bool_003 = !(1 > 2) && !(3 < 2) && !(5 == 4) && !(7 != 7);

// Final calculations
final_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10;
final_product = 1 * 2 * 3 * 4 * 5;
final_complex = ((final_sum + final_product) * 2) - (final_sum / 2);

final_string_length = len(stress_string_001) + len(stress_string_002) + len(stress_string_003);
final_list_length = len(stress_list_001) + len(stress_list_002) + len(stress_list_003) + len(stress_list_004);

// Assertions to verify correctness
assert final_sum == 55, "Final sum check";
assert final_product == 120, "Final product check";
assert final_complex == 322.5, "Final complex calculation check";
assert final_string_length == 118, "Final string length check";
assert final_list_length == 45, "Final list length check";

print("Test 15: PASSED");
print("Large file processing successful!");
